特点
    拥有高级数据结构

类与继承:
    __init__  
    __del__
    可在类体外定义类的函数

异常处理
    try raise expect else finally
with
    __enter__
    __exit__

Tips
    random.choice(list)
    eval exec 将字符串中的字符当作命令来执行
    assert 断言,若为False则fatal error
    repr() 获得对象得正规字符串表示


    import this //zen of python

    进制赋值 //0x22
    运算顺序not > and > or
    range(1,5) 不包含最后一个数
    global语句用来声明x是全局变量
    有默认值的参数只能出现在参数列表后面
    pyc文件的意义是加快模块加载速度
    print("foo", end="")

    for k, v in enumerate(a_list) 带index进行迭代

    dict1.update(dict2) 从dict2中更新或新增kv

String format
    age = 20
    name = 'Swaroop'
    print('{0} was {1} years old when he wrote this book'.format(name, age))



我们可以使用函数的__doc__(注意，双下划线)属性(属于名字的)访问函数的文档字符串

assert 0>1 将会返回AssertionError



PEP: python enhanchment proposal

PyPI: python package index


class create procedure
    1. determin the metaclass
    2. prepare a namespce for it , default dict()   __prepare__
    3. execute the class declare body
    4. create the new class ; __new__

raise Exception from none : suppress the original exception in chained context

nonlocal
__path__ : internal module search path


__file__ :always return absolute path of file
__iter__, __next__

__index__: should return an int, bin(object)

sorted() , squence.sort()


name mangling 
    obj._Class__private_attr


descriptor

函数描述
    add(int:x + int:y) -> int:
 
unicodedata.normalize()

import pkgutil
data = pkgutil.get_data(__package__, 'somedata.dat') -> raw

importlib.import_module('.b', __package__) -> from . import b


time.ctime()
time.localtime()
time.mktime(datetime.datetime(2016, 01, 10).timetuple()) #return timestamp

'dump' to a file object and 'dumps' to a string

descriptor
    staticmethod
    classmethod
    __slots__
    property

dict((('a','b'),)) --> {'a':'b'} 
dict(a='b') --> {'a':'b'}
dict.update(a=10)
dict.update({'key':10})

__import__('str') --> import module
importlib.import_module('str')
The 'package' argument is required when performing a relative import. It
specifies the package to use as the anchor point from which to resolve the
relative import to an absolute import.

from __future__ import absolute_import
from __future__ import division, unicode_literals

module is a big dict, you can insert new attr into it
__builtin__.end = None

any(iterable object) --> return true if any bool(x) is true
all(iterable)  --> return true if all bool(x) is true

tuple(dict) --> (key1,key2...)
tuple(set) --> a tuple

sys.modules --> return a dict of all loaded modules

b = b'string' 
a = b.decode('utf-8')
c = a.encode('utf-8')

bytes <-(encode|decode)-> string

sys.getdefaultencoding()
sys.getfilesystemencoding()

'unicode'是python内部编码, 而'utf-8'是一种编码方式

bytearray(length) --> builtin
list slice rules   a_list[start:stop:step]  (not include stop, start default to 0)
c=[1,2,3]  b=c[::] (copy)  b=c[::-1](reverse copy)

from collections import Counter ; c=Counter('hello,world')
c.most_common(3) ; c just like a dictionary

sh,purl,docopt,when module

@property
def attr()
@attr.setter
@attr.deleter

eval compile exec
os.execvp(program,args) 
os.spawnvp
os.fork()  daemon

while/for, else: when loop is normally done then run else branch


minimal openstack
    ministack
        api
        compute library
            compute.driver()
                kvm
                docker
            network.driver
                bridge+dhcp mq.driver 
                rabbit
            dashboard(flask)

        client script
            argparse,cmd



callable = deco(callable), deco is callable 
    deco can be function or class
    callable can also be function or class



bin(): return the binary representation of an int or long number
bool() return True if argument are true
issubclass(str,basestring) --> True
callable(object) --> True of False
any(sequence) --> True if any is True
all(sequence) --> True if all is True
chr(int) --> return the charactor of the ascii table which has right serial number
cmp(x,y) --> -1, 0, 1 : compare x and y
vars([object]) -> dictionary
    Without arguments, equivalent to locals().
    With an argument, equivalent to object.__dict__.

__all__   __path__  __file__ __name__ __package__ __doc__

raw_input()   str_to_list
file.read() --> string
file.readliens() --> list
file.readline() --> string per line
file is a iterator

textwrap.fill(doc, width=40)

# pdb

pdb.set_trace()  : set breakpoint
pdb.pm()  : latest trace_back
pdb.run('module.func()')
python -m pdb script.py
l: list
p: print
r: run until current function return
a: show current funciton args
c: continue run until get another breakpoint
n: run until next line
j <line number> 


from test.a import * 
(定义__all__) 只会导入定义的属性
(没定义__all__)只会导入__init__.py
__all__ ,__file__ 需要显式定义


# how to test if multiple item in same container
item_set = set(item_list)
container_set = set(container)
if item_set.issubset(container_set): 
    return True


# set
#
a | b : 并集
a & b : 交集
a ^ b : 对称差集
a - b : b相对于a的差集


Exception.args

a  = 10 if True else 100

from module import * :
# will not be imported
    _a 
    __a 

import module:
    module._a
    module.__a


# what information stored in special attribute
__dict__ : only store private attribute, no method

bytes解码过后成为string,string编码后成为bytes
unicode 为python的内部编码
s = '中文' , 解释器会用默认编码存储一串bytes

m  = hashlib.md5()
m.update('hello')
m.update(' world')
m.hexdigest()
--> '5eb63bbbe01eeed093cb22bb8f5acdc3'
hashlib.md5('hello world').hexdigest()
--> '5eb63bbbe01eeed093cb22bb8f5acdc3'


from shutil import make_archive
name = os.path.expanduser(os.path.join('~', 'myarch'))
root_dir = os.path.expanduser(os.path.join('~','.ssh'))
make_archive(name, 'gztar', root_dir)



from cStringIO import StringIO
# python3  from io import StringIO
a = StringIO()
a.write('first line\n')
# a.seek(0)
print >>a, 'second line\n')
print a.getvalue()
a.close()

## pdb使用

python -m pdb sr.py
pdb.set_strace（）

b 设置断点  
c 继续执行程序    
l 查看当前行的代码段  
s 进入函数  
r 执行代码直到从当前函数返回  
q 中止并退出  
n 执行下一行  
p（p） 打印变量的值  
h 帮助  


## convention
- use CameCase for classes
- use lower_case_with_underscores for functions and methods
- use self as the name for the first method argument
- use docstrings
- put comments on a line of their own
- use 4-space indentation and no tabs
- wrap lines so that they don't exceed 79 characters
- use blank lines to seperate functions and classes and larger blocks of code inside functions
- 7 is an instance of int, int class is an instance of type 
- difference between instance and subclass
  
##tips
1. python的内建基类:int str list dict function type super code module
2. 所有对象均为object的实例  
3. type生成了所有的基类  
4. type 继承于object,所有的基类也继承于object  
5. locals()可打印出所有局部变量，globals()可打印全局变量  
6. 无法生成与类名相同的实例  
7. 修饰器，接受一个function,返回一个function  
8. vim中设置tab为4空格 set ts=4 sw=4 sts=4 et  
9. range(start,stop,pace),xrange is faster than range
10. 集合必须用set()来生成
11. python-kombu: python rabbitmq driver
12. python没有真正意义的protect 和 private,只能模拟，但不真正起作用

##问题
1. is 与 '==' 是否相同
2. a=5,b=5; a == b true; a is b false
3. 被修饰器修饰的函数，无法打印其doc string
4. pyenv的使用
## 5,int,type,object之间的关系
```python
a=5; isinstance(a,int) True
int.__class__  type
isinstance(int,type) True
type.__class__ type
issubclass(type,type) True
issubclass(type,object) True
issubclass(int,object) True
isinstance(type,object) True
isinstance(int,object) True
```


## list的常用methods
```python
append(element)
extend(list)
insert(i,x)
remove(x)
pop(i)
index(x) return the index of the first item with value 'x'
count(x) return the number of times 'x' appears in list
sort(cmp=None,key=None,reverse=False)
reverse()
```
## dict的常用methods
```python
D.clear() remove all items from d
D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None
D.iteritems() -> an iterator over the (key, value) items of D
D.keys() -> list of D's keys 
D.values() -> list of D's values
D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
D.copy() -> a shallow copy of D
D.has_key(k) -> True if D has a key k, else False
D.iterkeys()
D.itervalues()
D.pop()
```
## filter,map,reduce,zip  
```python
### filter
def f(x):
    if  x % 2 != 0 and x % 3 != 0:
        return x
filter(f,range(2,15))
#### map
a=[1,2,3]
b=[4,5,6]
def add(x,y):
     return x+y

map(add,a,b) -->[5, 7, 9]

### reduce
def add(x,y):
     return x+y
reduce(add,range(10)) --> 45

### zip 
a=[1,2,3]
b=[4,5,6]
zip(a,b) --> [(1, 4), (2, 5), (3, 6)]
```
---
## python language reference
###notation (BNF grammer notation) 
[巴科斯范式](http://baike.baidu.com/view/1137652.htm)
   
### lexical analysis
```python
a python program is read by a parser, Input to the parser is a stream of tokens, generated by the lexical analyzer. 
   
a python program is divided into a number of logical lines
the end of a logical line is represented by the token NEWLINE,statements can  not cross logical line boundaries 
where NEWLINE is allowed by syntax(e.g., between statements in compound statements), A logical line   
is constructed from one or more physical lines by following the explicit or implicit line joining rules
  
physical line is a sequence of characters terminated by an end-of-line sequence  
  
a comment starts with a hash character(#), is ignored by the syntax
  
explicit line joining: \n; 
  
implicit line joining: expressions in parentheses,square brackets or curly braces can be split over more  
than one physical line without using backslashes.  
  
implicit continued line can carry comments, the indentation of the continuation lines is not important,  
blank continution lines are allowed, there is no NEWLINE token between implicit continuation lines.  
Implicited continued lines can also occur within triple-quoted strings, in that case they can not carry comments
  
tabs are replaced by one to eight spaces  
  
TOKENS: NEWLINE INDENT DEDENT　identifiers,keywords,literals,operators,delimiters,(whitespace are not token,  
but serve to delimit tokens , a token comprises the longest possible string that forms a legal token.
    
identifiers are unlimited in length, Case is significant

keywords:  
and, del, from, not, while, as, elif, global, or, with, assert, else, if, pass, yield, break, except  
import, print, class, exec, in, raise, continue, finally, is, return, def, for, lambda, try 
  
reserved classes of identifiers
certain classes of identifiers (besides keywords) have special meanings,these classes are identified by the  
pattern of leading and trailing underscore characters.
_*　 __*__   __*
```
  
String format
    '{name} want to eat {food}'.format(name='cats', food='lalal')
    '{} is a {}'.format('This', 'placeholder')
    '{0} can be {1}'.format('string', 'formated')

operator.itemgetter
operator.attrgetter
operator.methodcaller

collections.defaultdict
collections.OrderedDict
collections.deque
collections.Counter
sorted(iterable, key=sort_lambda)
bisect.insort(iterable, item)
setattr(obj, name, value)
getattr(obj, name)
delattr(obj, name)


类可以定义在方法, 类, 或类中
函数可以定义在函数或方法中

函数传递方式为pass-by-sharing, 参数仅仅是新的binding, 如果指向的值是mutable, 则变量会发生改变


同时catch多种类型Exception
    try:
        func()
    except (IDontLikeYouException, YouAreBeingMeanException) as e:
        pass

