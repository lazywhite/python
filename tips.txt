新式类与老式类
    class A:
        pass

    class B(object):
        pass

    a = A()
    b = B()
    type(a) --> instance 
    type(b) --> __main__.B

    type(A) --> classobj
    type(B) --> type


    mro: 老式类深度优先， 新式类广度优先

列表删除元素
    type(a) --> list
    a.remove(<element>)
    a.pop([index])

bool([0, None, [], {}, ()]) --> False



isinstance(10, int) -->True
issubclass(A, object) -->bool

python不支持函数重载 不支持泛型, 因为函数对参数类型和个数均不敏感
python singledispatch


try语句块如果没有异常发生, 则执行else语句, finally一定会被执行

@classmethod 第一个参数一定是cls, @staticmethod像普通方法一样定义即可


python 数据类型
    int
    long
    float
    bool
    complex
    str
    function
    type
    list
    set
    dict
    tuple

面向对象
    继承关系
        obj.__base__ 查看其父类
        type.__base__ --> object
        object是继承关系的顶点, 所有数据类型的父类都是object
    类型实例关系
        obj.__class__ 查看其类型
        object.__class__ --> type
        type是实例关系的顶点, 所有对象都是它的实例



float('nan')
float('inf')
float('-inf')

d = {'k1':200, 'k2': 100}
max(d) --> 'k2'
max(d, key=lambda key: d[key]) --> 按value排序


class A(object):
    __private = 10  # 访问时自动被重命名, 被继承后无法被覆盖
    _protected = 20

class B(A):
    __private = 100
    _protected = 200
	_A__private = 10101  # override方法

    def __func(self):
        pass

b = B()

b._protected
b._B__private
b._A__private
b._B__func()

## GIL
一个防止多线程并发执行机器码的一个Mutex, 造成在计算密集型的多线程程序中性能甚至低于单线程
因为有了GIL, 默认python内部对象是thread-safe的，无需在实现时考虑额外的内存锁和同步操作




## install pycrypto-2.6.1 on Mac 10.12
    configure: error: C preprocessor "clang++" fails sanity check
    方法： **sudo** pip install pycrypto

## django template unicode decode error
    manage.py
        reload(sys)
        sys.setdefaultencoding('utf8')

    path/to/template.html
        <head>
            <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        </head>
    views.py
        # -*- coding: utf-8 -*-


string.join(list), list内的元素必须是string
    ", ".join(str(i) for i in list)


wss:// websocket with ssl
websocket 默认可以跨域, 可以通过Origin header进行控制
数据支持字符串, array buffer, blob


python thread 不支持stop thread的api, 会导致GIL死锁
process api支持停止


a = "0x13"  b = int(a, 16)  


函数的参数传递
    对于可变对象, 相当于传引用
    对于不可变对象, 相当于传值


a = 10
def f(num):
    num += 10
    return num
b = f(a)
print a # 10
print b # 20


c = [1, 2]
def f1(aList):
    aList[0] += 10
    return aList
d = f1(c)
print c # [11, 2]
print d # [11, 2]


def change():
    global y 
    y += 10
y = 100
change()
print y #110

进制转换
    bin() oct() int() hex()

a = list(range(3))
print "print list %s" % a

检查文件是否存在
    os.path.exists("/file/path")

反转list a[::-1]

pip install error
    pip install -U pip


1.from a.b import c 
    both a.__init__ and b.__init__ will be executed,
    then <import a >will not execute a.__init__ any more

2.from a import * 
    will not import name.startswith('_')
    __all__ can define resource list

3.from __future__ import absolute_import
     import string ## will try to import 'string' standard library not .string

4. relative import can only use like this <from . import m>
    it won't work if parts of package are executed as script

5. import importlib; importlib.import_module('name')
    path = importlib.import_module('os.path')


install m2crypto on mac
    brew install openssl
    brew install swig

    env LDFLAGS="-L$(brew --prefix openssl)/lib" \
    CFLAGS="-I$(brew --prefix openssl)/include" \
    SWIG_FEATURES="-cpperraswarn -includeall -I$(brew --prefix openssl)/include" \
    pip install m2crypto



Normally, using a.b to get, set or delete an attribute looks up the object named b in the class dictionary for a, but if b is a descriptor, the respective descriptor method gets called.


An object is hashable if it has a hash value which never changes during its lifetime

All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal (except with themselves), and their hash value is their id().

iterator : an object representing a stream of data

metaclass: The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The metaclass is responsible for taking those three arguments and creating the class. 

MRO: method resolution order 
module: An object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects.

package: Technically, a package is a Python module with an __path__ attribute

reference count

object: type, value, identifier

views: objects returned from dict.keys(), dict.values(), and dict.items() are called dictionary views. They are lazy sequences that will see changes in the underlying dictionary. To force the dictionary view to become a full list use list(dictview).


python2.x do not have nonlocal keyword

'return' will break the loop

Packages support one more special attribute, __path__. This is initialized to be a list containing the name of the directory holding the package’s __init__.py before the code in that file is executed. This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.



an object's type determines the operations that the object support
an object's mutability is determined by its type

It is not guaranteed that __del__() methods are called for objects that still exist when the interpreter exits.

print(object) execute object.__str__
repr(object) execute object.__repr__


__getattribute__ 

Specifically, any module that contains a __path__ attribute is considered a package.
